//Whoever reads this is smelly
//C+ = smelly
//erm its c++ akshully

//Run this line in terminal to test the build
// ./build/ControllerProgram.exe

#define SDL_MAIN_HANDLED    //BRO THIS WAS THE ONLY LINE THAT I NEEDED
#include <cpr/cpr.h>
#include <SDL.h>
#include <gpiod.h>
#include <iostream>
using namespace std;

// Function Declarations
int main();
void manageOutputs(double xAxis, double yAxis, double throttle,
                   gpiod_line* up, gpiod_line* down, gpiod_line* left,
                   gpiod_line* right, gpiod_line* throt1, gpiod_line* throt2);
gpiod_line* request_output_line(gpiod_chip* chip, int line_num, const char* label);
void release_line(gpiod_line* line);

// Main function to run everything
int main() {
    // Checks if the gamecontroller is connected to the program, returns 1 if none are found
    if (SDL_Init(SDL_INIT_GAMECONTROLLER) < 0) {
        std::cerr << "Failed to initialize SDL: " << SDL_GetError() << std::endl;
        return 1;
    }

    // Creates the variable for the gamecontroller
    SDL_GameController* bunga = nullptr;

    // Outputs the name of the controller
    if (SDL_IsGameController(0)) {
        bunga = SDL_GameControllerOpen(0);
        if (bunga) {
            std::cout << "PS5 Controller connected: " << SDL_GameControllerName(bunga) << std::endl;
        } else {
            std::cerr << "No PS5 controller detected.\n";
            SDL_Quit();
            return 1;
        }
    }

    SDL_Event e;
    bool running = true;

    // Variable initialization
    double leftX = 0;
    double leftY = 0;
    double rightTrigger = 0;

    // GPIO Initialization
    gpiod_chip* chip = gpiod_chip_open_by_name("gpiochip0");
    if (!chip) {
        std::cerr << "Failed to open GPIO chip\n";
        SDL_Quit();
        return 1;
    }

    gpiod_line* up     = request_output_line(chip, 17, "controller");
    gpiod_line* down   = request_output_line(chip, 27, "controller");
    gpiod_line* left   = request_output_line(chip, 22, "controller");
    gpiod_line* right  = request_output_line(chip, 23, "controller");
    gpiod_line* throt1 = request_output_line(chip, 5,  "controller");
    gpiod_line* throt2 = request_output_line(chip, 6,  "controller");

    if (!up || !down || !left || !right || !throt1 || !throt2) {
        std::cerr << "Failed to initialize all GPIO lines\n";
        gpiod_chip_close(chip);
        SDL_Quit();
        return 1;
    }

    // Main Loop
    while (running) {
        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT)
                running = false;
        }

        // Get joystick positions
        Sint16 rawLeftX = SDL_GameControllerGetAxis(bunga, SDL_CONTROLLER_AXIS_LEFTX);
        leftX = rawLeftX / 32767.0;

        Sint16 rawLeftY = SDL_GameControllerGetAxis(bunga, SDL_CONTROLLER_AXIS_LEFTY);
        leftY = rawLeftY / 32767.0;

        // Implements deadzones
        if (leftX <= 0.012 && leftX >= -0.012) leftX = 0.0;
        if (leftX < -1) leftX = -1;

        Sint16 rawThrottle = SDL_GameControllerGetAxis(bunga, SDL_CONTROLLER_AXIS_TRIGGERRIGHT);
        rightTrigger = rawThrottle / 32767.0;

        std::cout << "Throttle: " << rightTrigger << " | Steering: " << leftX << "\r";

        // Control GPIO outputs
        manageOutputs(leftX, leftY, rightTrigger, up, down, left, right, throt1, throt2);

        SDL_Delay(50);
    }

    // GPIO Cleanup
    release_line(up);
    release_line(down);
    release_line(left);
    release_line(right);
    release_line(throt1);
    release_line(throt2);
    gpiod_chip_close(chip);

    // SDL Cleanup
    SDL_GameControllerClose(bunga);
    SDL_Quit();

    return 0;
}

// Sets GPIO outputs based on joystick input
void manageOutputs(double xAxis, double yAxis, double throttle,
                   gpiod_line* up, gpiod_line* down, gpiod_line* left,
                   gpiod_line* right, gpiod_line* throt1, gpiod_line* throt2) {
    gpiod_line_set_value(right,  xAxis >  0.75 ? 1 : 0);
    gpiod_line_set_value(left,   xAxis < -0.75 ? 1 : 0);
    gpiod_line_set_value(up,     yAxis >  0.75 ? 1 : 0);
    gpiod_line_set_value(down,   yAxis < -0.75 ? 1 : 0);
    gpiod_line_set_value(throt2, throttle > 0.75 ? 1 : 0);
    gpiod_line_set_value(throt1, throttle < 0.25 ? 1 : 0);
}

// Requests a GPIO output line safely
gpiod_line* request_output_line(gpiod_chip* chip, int line_num, const char* label) {
    gpiod_line* line = gpiod_chip_get_line(chip, line_num);
    if (!line) {
        std::cerr << "Failed to get line " << line_num << std::endl;
        return nullptr;
    }
    if (gpiod_line_request_output(line, label, 0) < 0) {
        std::cerr << "Failed to request output for line " << line_num << std::endl;
        return nullptr;
    }
    return line;
}

// Releases a GPIO line if it exists
void release_line(gpiod_line* line) {
    if (line) gpiod_line_release(line);
}

